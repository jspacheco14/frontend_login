{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\n\n// Interceptor to attach JWT token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const login = async (username, password) => {\n  console.log([{\n    username,\n    password\n  }]);\n  const response = await api.post('/auth/login', {\n    username,\n    password\n  });\n  console.log({\n    \"data\": response.data\n  });\n  return response.data;\n};\nexport const getWasteCategories = async () => {\n  const response = await api.get('/waste/category');\n  return response.data;\n};\nexport const createInference = async (data, token) => {\n  const response = await api.post('/waste/waste', data, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nexport const getWasteLogs = async token => {\n  const response = await api.get('/waste/waste', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","login","username","password","console","log","response","post","data","getWasteCategories","get","createInference","getWasteLogs"],"sources":["/home/sebastian/proyectos/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n});\n\n// Interceptor to attach JWT token\napi.interceptors.request.use((config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n\nexport const login = async (username, password) => {\n    console.log([{username, password}])\n    const response = await api.post('/auth/login', { username, password });\n    console.log({\"data\": response.data})\n    return response.data;\n};\n\nexport const getWasteCategories = async () => {\n    const response = await api.get('/waste/category');\n    return response.data;\n};\n\nexport const createInference = async (data, token) => {\n    const response = await api.post('/waste/waste', data, {\n        headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n};\n\nexport const getWasteLogs = async (token) => {\n    const response = await api.get('/waste/waste', {\n        headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n}\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC;AACzB,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMM,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC/CC,OAAO,CAACC,GAAG,CAAC,CAAC;IAACH,QAAQ;IAAEC;EAAQ,CAAC,CAAC,CAAC;EACnC,MAAMG,QAAQ,GAAG,MAAMpB,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAE;IAAEL,QAAQ;IAAEC;EAAS,CAAC,CAAC;EACtEC,OAAO,CAACC,GAAG,CAAC;IAAC,MAAM,EAAEC,QAAQ,CAACE;EAAI,CAAC,CAAC;EACpC,OAAOF,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMH,QAAQ,GAAG,MAAMpB,GAAG,CAACwB,GAAG,CAAC,iBAAiB,CAAC;EACjD,OAAOJ,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAOH,IAAI,EAAEZ,KAAK,KAAK;EAClD,MAAMU,QAAQ,GAAG,MAAMpB,GAAG,CAACqB,IAAI,CAAC,cAAc,EAAEC,IAAI,EAAE;IAClDT,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUJ,KAAK;IAAG;EAChD,CAAC,CAAC;EACF,OAAOU,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMI,YAAY,GAAG,MAAOhB,KAAK,IAAK;EACzC,MAAMU,QAAQ,GAAG,MAAMpB,GAAG,CAACwB,GAAG,CAAC,cAAc,EAAE;IAC3CX,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUJ,KAAK;IAAG;EAChD,CAAC,CAAC;EACF,OAAOU,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,eAAetB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}